def function(
    argument: ArgType,
    argument2: ArgType,
    *vararg_consumer: EachArgType,
    **varkwarg_consumer: EachArgType,
) -> ReturnType {
    a = 1
    print("Hello")
    throw error
    return 1
    throw error & return partial_result
}

def throws() throw "error"

def a() {
    throws()
    print("Will never be accessible")
}

def b() {
    try(throws()).then(result -> switch result {
        # idk how i'll implement this pattern matching
        case Ok(value) print(value)
        case Err(cause) print("Err!", cause)
    })
    # 100% the parser should support carrying
    # over .calls() to next line
    try(throws())
    .catch("error", error -> print(error))
    .finally(-> print("Finished"))
    result = try throws()
    print(result.value, result.cause)
}

def data_types() {
    # Simple
    a = 1    # Int
    b = 2.3  # Float
    c = "a"  # Str
    # Lists
    d = []
    e = [1, 2, 3]
    f = [1, 2, 3, *e]
    # Set
    g = Set(1, 2, 2, 2, 3)
    # Dict
    h = Dict()
        .add("hello", "world")
        .add("key", "value")
}

def lambdas() {
    full = (a, b, c, *d, **e) -> {
        stmt1
        stmt2
    }
    expr = (a, b, c, *d, **e) -> expr1
    one_arg = a -> {
        stmt1
        stmt2
    }
    one_arg_expr = a -> expr1
    no_arg = -> {
        stmt1
        stmt2
    }
    no_arg_expr = -> expr1
    predicate_style = ? > 5
    predicate_style_named = ??a > ??b
}

def control_flow() {
    if condition print("true")
    else print("false")

    while condition {
        code
    } # do we really need it

    while_post condition {

    } # do we really need it?

    for i in 1..10 {
        print(i)
    } # do we really need it?

    # Possible alternative is to just replace
    # all control flow with functions
}

# Data structs

struct Vec2D {
    construct (self, x: Int, y: Int) {
        self.x = x
        self.y = y
    }

    def length(self) -> Int
        return (self.x**2 + self.y**2)**0.5
}

# Actually just a table:
# {
#   __typename__ = "Prototype",
#   __faces__ = Set("Prototype"),
#   __proto_name__ = "Vec2D",
#   __construct__ = (Int, Int) -> Vec2D,
#   length = (Vec2D) -> Int
# }
#
# Calling a function with a.f() == a.f(a)
# the argument is automatically inserted

# Returns the same thing
record Vec2D(
    x: Int,
    y: Int
) {
    def length(self) -> Int
        return (self.x**2 + self.y**2)**0.5
}

# Interfaces

interface PointLike {
    x: Int
    y: Int
}

interface Prototype {
    __construct__: (*args, **kwargs) -> Obj
    __proto_name__: Str
}

print(Vec2D is Prototype)  # Type checking
print(Vec2D(1, 2) is PointLike)
    # Fail, is not a PointLike
print(Vec2D(1, 2) conforms to PointLike)
    # Success, indeed conforms to PointLike

def advanced_collections() {
    # list comprehension
    a = [
        expr
        for expr in collection
        if cond
        else expr
    ]
    # dict comprehension
    b = Dict.build([
        [k, v]
        for expr in collection
        if cond
        else expr
    ])
    # set comprehension
    c = Set(*[
        # list comprehension
    ])
    # range generation
    d = 1:10  # same as in Quail
}

def list_api() {
    1..1000
        .filter(? > 5)
        .filter(? % 2 == 0)
        .for_each(print)
        .map(a -> a**2)
        .for_each(print)
}

# Dynamic libraries

import module.name = name
import module.name.(
    name1 = name1, name2 = name2,
    unaliased1, unaliased2
)

export name1, name2, name3

# Cadence
# Coda
# Coloratura
# Corda
# Eilend
# Encore
# Facile
# Fermata
# Fuoco
# Giusto
# Segno
#


# Cadence
# Coda
# Coloratura
# Eilend
# Encore
# Fuoco
# Segno
